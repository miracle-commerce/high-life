{% comment %}
    Renders a quantity selector for a product.
    Accepts:
    - id: {String} value of the id attribute of the input, eg. variant id
    - data_line_index: {Number} line index if quantity selector is part of a line item
    - product_name: {String} name of the product
    - hide_label_on_mobile: {String} Hides the 'quantity' label on mobile if set to true (false by default)
    - name: {String} value of the name attribute of the input
    - value: {String} value of the value attribute of the input
    - classes: {String} custom classes to be added to the container div
    - quantity_input_classes: {String} classes for the quantity input

    Usage:
    {% render 'armament-quantity-selector' with id: item.variant.id, data_line_index: data_line_index, product_name: item.product.title, hide_label_on_mobile: true, name: 'quantity', value: item.quantity, classes: 'mb-xl' %}
{% endcomment %}

{%- liquid
    assign button_classes = "flex items-center justify-center w-11 h-11 group"
    assign id = 'quantity-' | append: id
    assign label = 'products.product.quantity.input_label' | t: product: product_name
    assign aria_label = 'aria-label="' | append: label | append: '"'
    assign input_classes = 'border-0 text-center text-b1 ' | append: quantity_input_classes
  -%}
  
  <div class="text-body armament-quantity-selector {{ classes }}">
    <div class="mb-s">
      <label
        for="{{ id }}"
        class="text-b1 leading-none{% if hide_label_on_mobile %} sr-only md:not-sr-only{% endif %}"
      >
        {{ 'products.product.quantity.label' | t }}
      </label>
    </div>
    <quantity-range-selector class="inline-flex border border-theme rounded-theme"{% if data_line_index %} data-line-index={{ data_line_index }}{% endif %} data-section-id={{ section.id }} data-selector-type="range">
      <button
        type="button"
        class="{{ button_classes }}"
        name="minus"
        aria-label="{{ 'products.product.quantity.decrease' | t: product: product_name | escape }}"
        data-aid="quantity-minus"
        data-armada-animation="icon" 
      >
        {% render 'armament-icon' with icon: 'minus' %}
      </button>
        <div class="quantity-range-selector-wrapper">
          <output class="quantity-bubbles"><span>25 tickets</span></output>
          <input type="range" name="quantity" value="25" min="25" max="350">
          {%- comment -%}
          {% render 'armament-input' with
            type: 'range',
            classes: input_classes,
            id: id,
            name: name,
            value: value,
            attributes: aria_label,
            min: 25,
            max: 350
          %}
          {%- endcomment -%}
          <span class="range-label--min range-label">25</span>
          <span class="range-label--max range-label">350</span>
        </div>
      <button
        type="button"
        class="{{ button_classes }}"
        name="plus"
        aria-label="{{ 'products.product.quantity.increase' | t: product: product_name | escape }}"
        data-aid="quantity-plus"
        data-armada-animation="icon" 
      >
        {% render 'armament-icon' with icon: 'plus' %}
      </button>
    </quantity-range-selector>
  </div>
  <safe-load-scripts>
    {%- comment -%}
    <script src="{{ 'component-quantity-selector.min.js' | asset_url }}" defer="defer" type="module" data-armada-load-key="quantity-selector"></script>
    {%- endcomment -%}
    <script>
      let quantityRangeSelectors = document.querySelectorAll("quantity-range-selector[data-selector-type='range']");
      const setValue = (range, bubble) => {
        const newValue = Number( (range.value - range.min) * 100 / (range.max - range.min) ),
              newbubblePrePosition = 10 - (20 * newValue / 100);
        bubble.innerHTML = `<span>${range.value} tickets</span>`;
        bubble.style.left = `${newValue}%`;
        bubble.style.transform = `translateX(calc(-50% + ${newbubblePrePosition}px))`;
      }

      quantityRangeSelectors.forEach((qtyRangeSelector)=>{
        let quantityInputBox = qtyRangeSelector.querySelector("input[type='range']");
        let quantityBubble = qtyRangeSelector.querySelector(".quantity-bubbles");
        let increaseQty = qtyRangeSelector.querySelector("button[data-aid = 'quantity-plus']");
        let decreaseQty = qtyRangeSelector.querySelector("button[data-aid = 'quantity-minus']");

        increaseQty.addEventListener('click', (e)=>{
          e.preventDefault();
          if(quantityInputBox.value < quantityInputBox.max){
            newQty = parseInt(quantityInputBox.value) + 1; 
            quantityInputBox.value = newQty;
            setValue(quantityInputBox, quantityBubble);
          }
        })

        decreaseQty.addEventListener('click', (e)=>{
          e.preventDefault();
          if(quantityInputBox.value > quantityInputBox.min){
            newQty = parseInt(quantityInputBox.value) - 1; 
            quantityInputBox.value = newQty;
            setValue(quantityInputBox, quantityBubble);
          }
        })

        quantityInputBox.addEventListener('input', (e)=>{
          e.preventDefault();
          setValue(quantityInputBox, quantityBubble);
        })
      })
    </script>
  </safe-load-scripts>
  